The convolutional layer can be implemented with different algorithms like im2col+gemm, Winograd, fft, and direct. We are providing the optimized implementations for im2col+gemm and Winograd for the convolutional layer. 

 
To run with im2col+gemm implementations:
    Download: 
        git clone https://github.com/soniab/darknetRISCVV.git

    Compilation:
        im2col+gemm implementation is a part of the darknet repository and does not require any additional linking. 
        Enter the repository by using `cd darknetRISCVV`
        To compile the im2col+gemm implementation, use Makefile_gemm. 
        NNPACK is already set as 0 in the Makefile_gemm. 
        For compilation use the 'make -f Makefile_gemm' command. 
    Run:
        To exexute the binary on A64fx with YOLOV3 network model, use the following command
            './binary detect cfg/yolov3.cfg yolov3.weights data/dog.jpg'



To run with Winograd implementation:
    Download:
        git clone https://github.com/soniab/darknetRISCVV.git

    Compilation:
        Before compiling darknet repository, make sure to download NNPACK and build. Follow the instructions from README_RISCVV from "https://github.com/soniab/NNPACKRISCV.git" repository to download and compile the NNPACK for RISC-V Vector achitecture. Note: Please note that it is necessary to first build NNPACK for RISC-V Vector architecture because it is important to link 'NNPACKRISCV/lib.a' to call the kernels for the Winograd implementation.  
    
        Compilation of Daknet with NNPACK:
            Enter the repository by using `cd darknetRISCVV`
            To compile the Winograd implementation, use Makefile_NNPACK. 
            NNPACK is already set as 1 in the Makefile_NNPACK. 
            For compilation use the 'make -f Makefile_NNPACK' command.  
    Run:
        To run the binary on A64fx use following command:
            './binary detect cfg/yolov3.cfg yolov3.weights data/dog.jpg'



Current Limitations: In Winograd implementations, the utilization of full vector length for tuple multiplication is limited up to 4096-bit only due to the block size set as 32. 
